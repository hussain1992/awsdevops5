parameters:
  - name: environment
    type: string
    displayName: "The name of the environment (ex. dev, prod )"

  - name: layers
    type: object
    displayName: "A layer object"

  - name: getImageLayers
    type: string
    default: ""
    displayName: "Retrieve an Image ID"

  - name: pipelineId
    type: string
    default: ""
    displayName: "The Azure DevOps Pipeline ID"

  - name: runId
    type: string
    default: ""
    displayName: "The build from which to download the artifacts"

  - name: preferTriggeringPipeline
    type: string
    default: ""
    displayName: "A boolean specifying whether to download artifacts from a triggering build."

  - name: downloadPath
    type: string
    default: ""
    displayName: "Directory to download the artifact files. Can be relative to the pipeline workspace directory or absolute. If multi-download option is applied (by leaving an empty artifact name), a sub-directory will be created for each."

  - name: targetFolder
    type: string
    default: ""
    displayName: "Target folder or UNC path files will copy to"

  - name: projectName
    type: string
    default: ""
    displayName: "The name of the Azure DevOps project"

  - name: runBranch
    type: string
    default: ""
    displayName: "Specify to filter on branch/ref name"

  - name: runVersion
    type: string
    default: ""
    displayName: "Specifies which build version to download. Options: latest, latestFromBranch, specific"

  - name: terraformDebug
    type: boolean
    displayName: "Specifies whether Terraform Debug is enabled. True/False"

stages:
  - stage: apply
    displayName: apply
    variables:
      - template: ./Variables.${{ parameters.environment }}.yaml
    jobs:
    - ${{ each layer in parameters.layers }}:

      # Terraform Apply is a deployment job to enable use of environments.
      # If Terraform plan did not detect changes, this iteration stops.

      - ${{ if contains( layer.skip, false) }}:
          - deployment: ${{ layer.name }}_${{ parameters.environment }}_apply
            displayName: ${{ layer.name }} Apply
            environment: ${{ parameters.environment }}
            dependsOn:
              - ${{ each dependency in layer.dependencies }}:
                  - ${{ dependency.key }}_${{ parameters.environment}}_apply
            workspace:
              clean: all
            strategy:
              runOnce:
                deploy:
                  steps:
                    - checkout: self

                    # Download the universal package for the layer and the version

                    - task: UniversalPackages@0
                      displayName: ${{ layer.type }} artifact
                      inputs:
                        command: "download"
                        downloadDirectory: "$(System.DefaultWorkingDirectory)/layer-${{ layer.type }}"
                        feedsToUse: "external"
                        externalFeedCredentials: $(artifactFeedCredentials)
                        feedDownloadExternal: $(artifactFeed)
                        packageDownloadExternal: layer-${{ layer.type }}
                        versionDownloadExternal: ${{ layer.version }}

                    # Conditional Image Builder connection if IB is enabled

                    - ${{ if contains( parameters.getImageLayers, layer.name) }}:
                        - template: ./GetImage.yaml
                          parameters:
                            projectName: ${{ parameters.projectName }}
                            runVersion: ${{ parameters.runVersion }}
                            runBranch: ${{ parameters.runBranch }}
                            pipelineId: ${{ parameters.pipelineId }}
                            runId: ${{ parameters.runId }}
                            preferTriggeringPipeline: ${{ parameters.preferTriggeringPipeline }}
                            downloadPath: ${{ parameters.downloadPath }}
                            layerType: ${{ layer.type }}

                    - task: qetza.replacetokens.replacetokens-task.replacetokens@3
                      displayName: "Replace tokens in **/*.tfvars, **/*.tf, **/*.sh, **/*.ps1"
                      inputs:
                        rootDirectory: "$(System.DefaultWorkingDirectory)/kits/jumpstart-vm"
                        targetFiles: "**/*.tfvars, **/*.tf, **/*.sh, **/*.ps1"
                        tokenPrefix: "[__"
                        tokenSuffix: "__]"
                        verbosity: 'off'

                    # Terraform apply. terraformapply.sh is packaged with the layer build process, but exists in Stratum/scripts.sh

                    - task: AzureCLI@2
                      displayName: Applying ${{ layer.name }}
                      env: 
                        TF_LOG: $(terraformDebugType)
                        TF_LOG_PATH: "$(Build.ArtifactStagingDirectory)/tf_debug_apply"
                      inputs:
                        azureSubscription: ${{ variables.serviceConnectionApp }}
                        addSpnToEnvironment: true
                        scriptType: bash
                        scriptLocation: scriptPath
                        scriptPath: "$(System.DefaultWorkingDirectory)/layer-${{ layer.type }}/${{ layer.provider }}apply.sh"
                        arguments: layerName=${{ layer.name }} environment=${{ parameters.environment }} backendResourceGroupName=$(backendResourceGroupName) backendStorageAccountName=$(backendStorageAccountName) backendContainerName=$(backendContainerName) buildRepositoryName=$(Build.Repository.Name) basedOnStratumKitName=$(basedOnStratumKitName) layerType=${{ layer.type }} layerDestroy=${{ layer.destroy }} kitPath=$(kitPath) provider=${{ layer.provider }} useMsi=$(useMsi) inputFile=${{ layer.inputFile }}

                    - task: PublishPipelineArtifact@1
                      displayName: Publish Terraform Debug Artifact
                      condition: eq(${{ parameters.terraformDebug }}, true)
                      inputs:
                        path: "$(Build.ArtifactStagingDirectory)/tf_debug_apply"
                        artifactName: "${{ layer.name }}-${{ parameters.environment }}-apply-debug"